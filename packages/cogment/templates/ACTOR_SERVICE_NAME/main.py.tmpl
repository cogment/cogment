import cog_settings
{{ range .Service.Implementations -}}
{{- range .ActorClasses -}}
from data_pb2 import {{.|pascalify}}Action
{{ end -}}
{{- end }}
import cogment

import asyncio

{{ range .Service.Implementations -}}
async def {{.Name|snakeify}}(actor_session):
    actor_session.start()

    async for event in actor_session.event_loop():
        if event.observation:
            observation = event.observation
            print(f"'{actor_session.name}' received an observation: '{observation}'")
            if event.type == cogment.EventType.ACTIVE:
                action = {{index .ActorClasses 0|pascalify}}Action()
                actor_session.do_action(action)
        for reward in event.rewards:
            print(f"'{actor_session.name}' received a reward for tick #{reward.tick_id}: {reward.value}")
        for message in event.messages:
            print(f"'{actor_session.name}' received a message from '{message.sender_name}': - '{message.payload}'")
{{ end -}}

async def main():
    print("{{.Service.Name|pascalify}} actor service starting...")

    context = cogment.Context(cog_settings=cog_settings, user_id="{{.Project.ProjectName}}")

{{- range .Service.Implementations }}
    context.register_actor(
        impl={{.Name|snakeify}},
        impl_name="{{.Name|snakeify}}",
        actor_classes=[{{range .ActorClasses}}"{{.|snakeify}}",{{end}}])
{{- end}}

    await context.serve_all_registered(cogment.ServedEndpoint(port=9000))

if __name__ == '__main__':
    asyncio.run(main())
