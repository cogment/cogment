// Copyright 2023 AI Redefined Inc. <dev+cogment@ai-r.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package templates

import (
	"log"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/bradleyjkemp/cupaloy"
	ignore "github.com/codeskyblue/dockerignore"
	"github.com/cogment/cogment/api"
	"github.com/cogment/cogment/helper"

	"github.com/stretchr/testify/assert"
)

func TestIgnore(t *testing.T) {
	matches, err := ignore.Matches("foo.py", []string{"*.py"})
	assert.NoError(t, err)
	assert.True(t, matches)
}

func TestRecursivelyGenerateFromTemplates(t *testing.T) {
	config, err := api.ExtendDefaultProjectConfig(&api.ProjectConfig{
		ProjectName:       "TestRecursivelyGenerateFromTemplates",
		ProjectConfigPath: "cogment.yaml", // Will changed to an absolute path in `testCreateProjectFiles`
		Components: api.ComponentsConfigurations{
			Orchestrator: helper.VersionInfo{Version: "v1.0"},
			Python:       helper.VersionInfo{Version: "1.0"},
			Metrics:      helper.VersionInfo{Version: "2.0"},
			Dashboard:    helper.VersionInfo{Version: "v1.5-beta"},
			Javascript:   helper.VersionInfo{Version: "1.25.5"},
		},
		ActorClasses: []*api.ActorClass{
			{Name: "master"},
		},
		TrialParams: &api.TrialParams{
			Actors: []*api.TrialActor{
				{Name: "human", ActorClass: "master", Implementation: "human", Endpoint: "client"},
			},
		},
	})
	assert.NoError(t, err)

	dir, err := os.MkdirTemp("", config.ProjectName)
	assert.NoError(t, err)

	defer func() {
		if err := os.RemoveAll(dir); err != nil {
			log.Fatalf("Failed to clean up temporary init files: %v", err)
		}
	}()

	err = RecursivelyGenerateFromTemplates(
		"/templates/web-client",
		[]string{"**/useActions.js*"},
		config,
		dir,
	)
	assert.NoError(t, err)

	generatedFiles := []string{}
	err = filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		assert.NoError(t, err)
		if !info.IsDir() {
			relativePath, err := filepath.Rel(dir, path)
			assert.NoError(t, err)
			generatedFiles = append(generatedFiles, relativePath)

			t.Run(strings.ReplaceAll(relativePath, "/", "-"), func(t *testing.T) {
				fileContent, err := os.ReadFile(path)
				assert.NoError(t, err)
				// Check each file against the previously generated snapshot
				// Skipping generated content check on files generated by protoc
				if !strings.HasSuffix(path, "_pb2.py") {
					cupaloy.SnapshotT(t, fileContent)
				}
			})
		}
		return nil
	})
	assert.NoError(t, err)
	// Check the generate file lists against the previous snapshot
	cupaloy.SnapshotT(t, generatedFiles)
}
