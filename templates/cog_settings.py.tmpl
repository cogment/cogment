import cogment as _cog
from types import SimpleNamespace
from typing import List

{{range $i, $proto := .Import.Proto -}}
import {{$proto | protoPathToPyPath}} as {{index $.Import.ProtoAlias $i}}
{{end -}}
{{- range .Import.Python -}}
import {{.}}
{{end}}

{{range .Import.Proto -}}
protolib = "{{. | protoPathToPyPath}}"
{{end}}


{{- range .ActorClasses}}
_{{.Name}}_class = _cog.actor.ActorClass(
    name="{{.Name}}",
    config_type={{if .ConfigType}}{{.ConfigType}}{{else}}None{{end}},
    action_space={{.Action.Space}},
	{{- with .Observation}}
    observation_space={{.Space}},
    observation_delta={{if .Delta}}{{.Delta}}{{else}}{{.Space}}{{end}},
    observation_delta_apply_fn={{if .DeltaApplyFn}}{{.DeltaApplyFn.Python}}{{else}}_cog.delta_encoding._apply_delta_replace{{end}},
    {{end -}}
)
{{end}}

actor_classes = _cog.actor.ActorClassList(
{{- range .ActorClasses}}
    _{{.Name}}_class,
{{- end}}
)

trial = SimpleNamespace(config_type={{if .Trial}}{{if .Trial.ConfigType}}{{.Trial.ConfigType}}{{else}}None{{end}}{{else}}None{{end}})

# Environment
environment = SimpleNamespace(config_type={{if .Environment}}{{if .Environment.ConfigType}}{{.Environment.ConfigType}}{{else}}None{{end}}{{else}}None{{end}})


class ActionsTable:
{{- range $i, $ac := .ActorClasses}}
    {{$ac.Name}}: List[{{$ac.Action.Space}}]
{{- end}}
    def __init__(self, trial):
{{- range $i, $ac := .ActorClasses}}
        self.{{$ac.Name}} = [{{$ac.Action.Space}}() for _ in range(trial.actor_counts[{{$i}}])]
{{- end}}

    def all_actions(self):
        return {{range $i, $ac := .ActorClasses}}{{if $i}} + {{end}}self.{{.Name}}{{end}}
