import cog_settings
{{ range .Service.Implementations -}}
{{- range .ActorClasses -}}
from data_pb2 import {{.|pascalify}}Action
{{ end -}}
{{- end }}
import cogment

import asyncio

{{ range .Service.Implementations -}}
async def {{.Name|snakeify}}(actor_session):
    actor_session.start()

    async for event in actor_session.event_loop():
        if "observation" in event:
            observation = event["observation"]
            print(f"'{actor_session.name}' received an observation: '{observation}'")
            action = {{index .ActorClasses 0|pascalify}}Action()
            actor_session.do_action(action)
        if "reward" in event:
            reward = event["reward"]
            print(f"{actor_session.name} received a reward for tick #{reward.tick_id}: {reward.value}/{reward.confidence}")
        if "message" in event:
            (sender, message) = event["message"]
            print(f"'{actor_session.name}' received a message from '{sender}': - '{message}'")
        if "final_data" in event:
            final_data = event["observation"]
            for observation in final_data.observations:
                print(f"'{actor_session.name}' received a final observation: '{observation}'")
            for reward in final_data.rewards:
                print(f"{actor_session.name} received a final reward for tick #{reward.tick_id}: {reward.value}/{reward.confidence}")
            for message in final_data.messages:
                print(f"'{actor_session.name}' received a final message from '{sender}': - '{message}'")
{{ end -}}

async def main():
    print("{{.Service.Name|pascalify}} actor service up and running.")

    context = cogment.Context(cog_settings=cog_settings, user_id="{{.Project.ProjectName}}")

{{- range .Service.Implementations }}
    context.register_actor(
        impl={{.Name|snakeify}},
        impl_name="{{.Name|snakeify}}",
        actor_classes=[{{range .ActorClasses}}"{{.|snakeify}}",{{end}}])
{{- end}}

    await context.serve_all_registered(port=9000)

if __name__ == '__main__':
    asyncio.run(main())
