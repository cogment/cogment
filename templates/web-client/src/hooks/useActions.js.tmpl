/*
 *  Copyright 2021 Artificial Intelligence Redefined <dev+cogment@ai-r.com>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import {useEffect, useState} from 'react';
import * as cogment from '@cogment/cogment-js-sdk';

export const useActions = (cogSettings, actorName, actorClass, userId) => {
  const [event, setEvent] = useState({
    observation: null,
    message: null,
    reward: null,
  });

  const [startTrial, setStartTrial] = useState(null);
  const [sendAction, setSendAction] = useState(null);

  // Set up the connection and register the actor only once, regardless of re-rendering
  useEffect(() => {
    const service = cogment.createService({cogSettings});

    const actor = {name: actorName, class: actorClass};

    service.registerActor(actor, async (actorSession) => {
      actorSession.start();

      // Double arrow function here beause react will turn a single one into a lazy loaded function
      setSendAction(() => (action) => {
        actorSession.sendAction(action);
      });

      for await (const {
        observation,
        message,
        reward,
      } of actorSession.eventLoop()) {
        let observationOBJ = observation && observation.toObject();

        setEvent({observation: observationOBJ, message, reward});
      }
    });

    // Creating the trial controller must happen after actors are registered
    const trialController = service.createTrialController();

    // Need to output a function so that the user can start the trial when all actors are connected
    // Again, double arrow function cause react will turn a single one into a lazy loaded function
    setStartTrial(() => async () => {
      const {trialId} = await trialController.startTrial(actor.name);
      trialController.joinTrial(trialId, actor);
    });
  }, [cogSettings, actorName, actorClass]);

  return [event, startTrial, sendAction];
};
