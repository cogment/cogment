stages:
  - build
  - publish

shellcheck:
  stage: build
  needs: ["build_docker"]
  image: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
  before_script:
    - shellcheck --version
  script:
    - shellcheck $(find . -name '*.sh' | xargs)

shfmt:
  stage: build
  needs: ["build_docker"]
  image: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
  before_script:
    - shfmt -version
  script:
    - shfmt -i 2 -ci -d .

licenses_checker:
  stage: build
  needs: []
  image: registry.gitlab.com/ai-r/cogment/license-checker:latest
  script:
    - license-checker

.base_docker_build:
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add bash
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_TOKEN
  cache:
    - key: cmake-docker-dependencies-cache
      paths:
        - build/linux_amd64/_deps
        - build/linux_amd64/lib

build_docker:
  stage: build
  needs: []
  extends: .base_docker_build
  timeout: 2 hours
  variables:
    COGMENT_BUILD_ENVIRONMENT_IMAGE_CACHE: $CI_REGISTRY_IMAGE/build-environment:latest
    COGMENT_BUILD_ENVIRONMENT_IMAGE: $CI_REGISTRY_IMAGE/build-environment:commit-$CI_COMMIT_SHORT_SHA
    COGMENT_BUILD_IMAGE_CACHE: $CI_REGISTRY_IMAGE/build:latest
    COGMENT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:commit-$CI_COMMIT_SHORT_SHA
    COGMENT_IMAGE: $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHORT_SHA
    COGMENT_CLI_IMAGE: $CI_REGISTRY_IMAGE/cli:commit-$CI_COMMIT_SHORT_SHA
    COGMENT_ORCHESTRATOR_IMAGE: $CI_REGISTRY_IMAGE/orchestrator:commit-$CI_COMMIT_SHORT_SHA
    COGMENT_TRIAL_DATASTORE_IMAGE: $CI_REGISTRY_IMAGE/trial-datastore:commit-$CI_COMMIT_SHORT_SHA
    COGMENT_MODEL_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/model-registry:commit-$CI_COMMIT_SHORT_SHA
  script:
    - ./build_docker.sh
    - docker push $COGMENT_BUILD_ENVIRONMENT_IMAGE
    - docker push $COGMENT_BUILD_IMAGE
    - docker push $COGMENT_IMAGE
    - ./deprecated_docker_images/build_deprecated_docker_images.sh
    - docker push $COGMENT_CLI_IMAGE
    - docker push $COGMENT_ORCHESTRATOR_IMAGE
    - docker push $COGMENT_TRIAL_DATASTORE_IMAGE
    - docker push $COGMENT_MODEL_REGISTRY_IMAGE

.base_linux_build:
  image: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
  needs: ["build_docker"]
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
    - export PATH=$PATH:$(go env GOPATH)/bin
  cache:
    - key: go-dependencies-cache
      paths:
        - .go/pkg/mod/
    - key: cmake-linux-amd64-dependencies-cache
      paths:
        - build/linux_amd64/_deps
        - build/linux_amd64/lib

build_linux_amd64:
  stage: build
  extends: .base_linux_build
  timeout: 2 hours
  script:
    - ./build_linux.sh
  artifacts:
    name: cogment_linux_amd64
    expose_as: cogment_linux_amd64
    expire_in: 1 week
    paths:
      - ./install/linux_amd64/

.base_macos_build:
  tags:
    - saas-macos-medium-m1
  image: macos-12-xcode-14
  before_script:
    - brew install go@1.20
    - export PATH="/usr/local/opt/go@1.20/bin:$PATH" # Make sure 1.20 is the first in the path
    - go version
    - mkdir -p .go
    - export PATH=$PATH:$(go env GOPATH)/bin
    - brew install cmake
  cache:
    - key: cmake-macos-m1-dependencies-cache
      paths:
        - build/macos_m1/_deps
        - build/macos_m1/lib

build_macos:
  stage: build
  needs: []
  extends: .base_macos_build
  timeout: 2 hours
  script:
    - ./build_macos.sh
  artifacts:
    name: cogment_macos
    expose_as: cogment_macos
    expire_in: 1 week
    paths:
      - ./install/macos_m1/

.base_windows_build:
  tags:
    - shared-windows
    - windows
    - windows-1809
  before_script:
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install golang -y --version 1.16.7
    - choco install cmake -y --version 3.25.2 --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install mingw -y --version 11.2.0.07112021
    - refreshenv
    - go version
    - cmake --version
  cache:
    - key: cmake-windows-amd64-dependencies-cache
      paths:
        - build/windows_amd64/_deps
        - build/windows_amd64/lib

build_windows_amd64:
  stage: build
  needs: []
  extends: .base_windows_build
  timeout: 2 hours
  script:
    - ./build_windows.bat
  artifacts:
    name: cogment_windows_amd64
    expose_as: cogment_windows_amd64
    expire_in: 1 week
    paths:
      - ./install/windows_amd64/

lint:
  stage: build
  needs: ["build_linux_amd64"]
  extends: .base_linux_build
  script:
    - ./build_linux.sh lint

test:
  stage: build
  needs: ["build_linux_amd64"]
  extends: .base_linux_build
  script:
    - ./build_linux.sh test_ci
  artifacts:
    when: always
    reports:
      junit: ./packages/cli/report.xml

# INTERNAL AI-R HELPER - Publish the current version from the `develop` branch with the `latest` docker tag.
push_docker_latest_to_gitlab:
  stage: publish
  needs: ["build_docker"]
  extends: .base_docker_build
  variables:
    COGMENT_BUILD_ENVIRONMENT_IMAGE_CACHE: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
    COGMENT_BUILD_ENVIRONMENT_IMAGE: $CI_REGISTRY_IMAGE/build-environment:latest
    COGMENT_BUILD_IMAGE_CACHE: $!reference [build_docker, variables, COGMENT_BUILD_IMAGE]
    COGMENT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:latest
    COGMENT_IMAGE: $CI_REGISTRY_IMAGE:latest
    COGMENT_CLI_IMAGE: $CI_REGISTRY_IMAGE/cli:latest
    COGMENT_ORCHESTRATOR_IMAGE: $CI_REGISTRY_IMAGE/orchestrator:latest
    COGMENT_TRIAL_DATASTORE_IMAGE: $CI_REGISTRY_IMAGE/trial-datastore:latest
    COGMENT_MODEL_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/model-registry:latest
  script:
    - ./build_docker.sh
    - docker push $COGMENT_BUILD_ENVIRONMENT_IMAGE
    - docker push $COGMENT_BUILD_IMAGE
    - docker push $COGMENT_IMAGE
    - ./deprecated_docker_images/build_deprecated_docker_images.sh
    - docker push $COGMENT_CLI_IMAGE
    - docker push $COGMENT_ORCHESTRATOR_IMAGE
    - docker push $COGMENT_TRIAL_DATASTORE_IMAGE
    - docker push $COGMENT_MODEL_REGISTRY_IMAGE
  only:
    - main
    - develop

push_docker_latest_to_dockerhub:
  stage: publish
  needs: ["build_docker"]
  extends: .base_docker_build
  variables:
    COGMENT_BUILD_ENVIRONMENT_IMAGE_CACHE: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
    COGMENT_BUILD_ENVIRONMENT_IMAGE: $CI_REGISTRY_IMAGE/build-environment:latest
    COGMENT_BUILD_IMAGE_CACHE: $!reference [build_docker, variables, COGMENT_BUILD_IMAGE]
    COGMENT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:latest
    COGMENT_IMAGE: cogment/cogment:latest
    COGMENT_CLI_IMAGE: cogment/cli:latest
    COGMENT_ORCHESTRATOR_IMAGE: cogment/orchestrator:latest
    COGMENT_TRIAL_DATASTORE_IMAGE: cogment/trial-datastore:latest
    COGMENT_MODEL_REGISTRY_IMAGE: cogment/model-registry:latest
  script:
    - ./build_docker.sh
    - docker push $COGMENT_IMAGE
    - ./deprecated_docker_images/build_deprecated_docker_images.sh
    - docker push $COGMENT_CLI_IMAGE
    - docker push $COGMENT_ORCHESTRATOR_IMAGE
    - docker push $COGMENT_TRIAL_DATASTORE_IMAGE
    - docker push $COGMENT_MODEL_REGISTRY_IMAGE
  only:
    - main

cogment:push_docker_tag_to_gitlab:
  stage: publish
  needs: ["build_docker"]
  extends: .base_docker_build
  variables:
    COGMENT_BUILD_ENVIRONMENT_IMAGE_CACHE: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
    COGMENT_BUILD_ENVIRONMENT_IMAGE: $CI_REGISTRY_IMAGE/build_environment:latest
    COGMENT_BUILD_IMAGE_CACHE: $!reference [build_docker, variables, COGMENT_BUILD_IMAGE]
    COGMENT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:latest
    COGMENT_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    COGMENT_CLI_IMAGE: $CI_REGISTRY_IMAGE/cli:$CI_COMMIT_TAG
    COGMENT_ORCHESTRATOR_IMAGE: $CI_REGISTRY_IMAGE/orchestrator:$CI_COMMIT_TAG
    COGMENT_TRIAL_DATASTORE_IMAGE: $CI_REGISTRY_IMAGE/trial-datastore:$CI_COMMIT_TAG
    COGMENT_MODEL_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/model-registry:$CI_COMMIT_TAG
  script:
    - ./build_docker.sh
    - docker push $COGMENT_IMAGE
    - ./deprecated_docker_images/build_deprecated_docker_images.sh
    - docker push $COGMENT_CLI_IMAGE
    - docker push $COGMENT_ORCHESTRATOR_IMAGE
    - docker push $COGMENT_TRIAL_DATASTORE_IMAGE
    - docker push $COGMENT_MODEL_REGISTRY_IMAGE
  only:
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(?:-[[:alnum:]]+)?$/

cogment_push_docker_tag_to_dockerhub:
  stage: publish
  needs: ["build_docker"]
  extends: .base_docker_build
  variables:
    COGMENT_BUILD_ENVIRONMENT_IMAGE_CACHE: !reference [build_docker, variables, COGMENT_BUILD_ENVIRONMENT_IMAGE]
    COGMENT_BUILD_ENVIRONMENT_IMAGE: $CI_REGISTRY_IMAGE/build_environment:latest
    COGMENT_BUILD_IMAGE_CACHE: $!reference [build_docker, variables, COGMENT_BUILD_IMAGE]
    COGMENT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:latest
    COGMENT_IMAGE: cogment/cogment:$CI_COMMIT_TAG
    COGMENT_CLI_IMAGE: cogment/cli:$CI_COMMIT_TAG
    COGMENT_ORCHESTRATOR_IMAGE: cogment/orchestrator:$CI_COMMIT_TAG
    COGMENT_TRIAL_DATASTORE_IMAGE: cogment/trial-datastore:$CI_COMMIT_TAG
    COGMENT_MODEL_REGISTRY_IMAGE: cogment/model-registry:$CI_COMMIT_TAG
  script:
    - ./build_docker.sh
    - docker push $COGMENT_IMAGE
    - ./deprecated_docker_images/build_deprecated_docker_images.sh
    - docker push $COGMENT_CLI_IMAGE
    - docker push $COGMENT_ORCHESTRATOR_IMAGE
    - docker push $COGMENT_TRIAL_DATASTORE_IMAGE
    - docker push $COGMENT_MODEL_REGISTRY_IMAGE
  only:
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(?:-[[:alnum:]]+)?$/

.base_gh:
  image: ubuntu:focal
  before_script:
    ## _Inspired by https://docs.gitlab.com/ee/ci/ssh_keys/_
    ##
    ## Install ssh-agent if not already installed.
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    ## Run ssh-agent
    - eval $(ssh-agent -s)
    ## Add the private key file to ssh-agent
    - echo "$GH_REPO_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Using the set $SSH_KNOWN_HOSTS to be able to verify remote servers public keys
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Install gh
    - apt update -y
    - apt-get install -y gnupg2 software-properties-common
    # Key retreieved here https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt
    - apt-key adv --keyserver keyserver.ubuntu.com --recv-key ${GH_DEBIAN_PACKAGE_KEY}
    - apt-add-repository https://cli.github.com/packages
    - apt update -y
    - apt install gh -y

test_gh:
  stage: build
  extends: .base_gh
  script:
    # Check the ssh connection
    # > not an actual test this will succeed in any case but the result is readable in build logs
    - ssh -T git@github.com || true
    # Check that gh is properly installed
    - gh version

publish_tag_to_github:
  stage: publish
  extends: .base_gh
  needs:
    - job: build_linux_amd64
      artifacts: true
    - job: build_macos
      artifacts: true
    - job: build_windows_amd64
      artifacts: true
  script:
    # Publish the tag
    - git checkout ${CI_COMMIT_BRANCH} # Checkout the branch not the sha1
    - git remote add downstream git@github.com:cogment/cogment.git
    - git fetch downstream ${CI_COMMIT_BRANCH}
    - git push --tags downstream ${CI_COMMIT_BRANCH}:${CI_COMMIT_BRANCH}
    # Assemble the release
    - mkdir -p ./release
    - cp ./install/linux_amd64/bin/cogment ./release/cogment-linux-amd64
    - cp ./install/macos_m1/bin/cogment ./release/cogment-macos-m1
    - cp ./install/windows_amd64/bin/cogment.exe ./release/cogment-windows-amd64.exe
    - tar czf ./release/cogment-api.tar.gz --directory=./install/linux_amd64/include/cogment .
    # Generate the changes for the target version
    - ./scripts/extract_version_changes.sh $CI_COMMIT_TAG > ./RELEASE_NOTES.md
    # gh release authenticates to github using the GH_TOKEN environment variable
    - gh release create $CI_COMMIT_TAG ./release/* -t $CI_COMMIT_TAG -R cogment/cogment $GH_PRERELEASE -F ./RELEASE_NOTES.md
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(-[[:alnum:]]+)$/'
      variables:
        GH_PRERELEASE: --prerelease
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
      variables:
        GH_PRERELEASE: ""

publish_branch_to_github:
  stage: publish
  extends: .base_gh
  script:
    - git checkout ${CI_COMMIT_BRANCH} # Checkout the branch not the sha1
    - git remote add downstream git@github.com:cogment/cogment.git
    - git fetch downstream ${CI_COMMIT_BRANCH}
    - git push downstream ${CI_COMMIT_BRANCH}:${CI_COMMIT_BRANCH}
  only:
    - main
