stages:
  - lint
  - test
  - build
  - publish

.base_golang:
  image: golang:1.13
  before_script:
    - apt-get update -y
    - apt-get install -y protobuf-compiler

.base_docker:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_TOKEN

.base_gh_ssh_agent:
  before_script:
    ## _Inspired by https://docs.gitlab.com/ee/ci/ssh_keys/_
    ##
    ## Install ssh-agent if not already installed.
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    ## Run ssh-agent
    - eval $(ssh-agent -s)
    ## Add the private key file to ssh-agent
    - echo "$GH_REPO_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Using the set $SSH_KNOWN_HOSTS to be able to verify remote servers public keys
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

go_lint:
  extends: .base_golang
  stage: lint
  script:
    - make lint

shellcheck:
  image: koalaman/shellcheck-alpine:stable
  stage: lint
  before_script:
    - shellcheck --version
  script:
    - shellcheck ./scripts/*.sh

shfmt:
  image: mvdan/shfmt:v3.1.0-alpine
  stage: lint
  before_script:
    - shfmt -version
  script:
    - shfmt -i 2 -ci -d ./scripts

apache_licenses_check:
  stage: lint
  image: registry.gitlab.com/ai-r/apache-license-checker:latest
  script:
    - apache-license-checker

test:
  extends: .base_golang
  stage: test
  script:
    - make test-with-report
  artifacts:
    when: always
    reports:
      junit: report.xml

build_binaries:
  extends: .base_golang
  stage: build
  script:
    - make release
  artifacts:
    expire_in: 1 week
    paths:
      - build

build_docker_image:
  extends: .base_docker
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest .
  except:
    # This job is not run on `develop` because `publish_latest_to_gitlab_docker_registry` run there and "includes" the build
    - develop
    # This job is not run on `main` because `publish_latest_to_dockerhub` run there and "includes" the build
    - main

# INTERNAL AI-R HELPER - Publish the current version from the `develop` branch with the `latest` docker tag.
publish_latest_to_gitlab_docker_registry:
  extends: .base_docker
  stage: publish
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - develop

publish_latest_to_dockerhub:
  extends: .base_docker
  stage: publish
  variables:
    DOCKER_HUB_IMAGE: "cogment/cli"
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $DOCKER_HUB_IMAGE:latest .
    - docker push $DOCKER_HUB_IMAGE:latest
  only:
    - main

publish_tag_to_dockerhub_and_gitlab_docker_registry:
  extends: .base_docker
  stage: publish
  variables:
    DOCKER_HUB_IMAGE: "cogment/cli"
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --tag $DOCKER_HUB_IMAGE:$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $DOCKER_HUB_IMAGE:$CI_COMMIT_TAG
  only:
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(?:-[[:alnum:]]+)?$/

publish_tag_to_gh_releases:
  stage: publish
  needs: ["build_binaries"]
  image: ubuntu:focal
  script:
    - apt update -y
    - apt-get install -y gnupg2 software-properties-common
    - apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
    - apt-add-repository https://cli.github.com/packages
    - apt update -y
    - apt install gh -y
    # gh release authenticates to github using the GH_TOKEN environment variable
    - gh release create $CI_COMMIT_TAG ./build/cogment-* -t $CI_COMMIT_TAG -R cogment/cogment-cli $GH_PRERELEASE -F ./CHANGELOG.md
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+(-[[:alnum:]]+)$/'
      variables:
        GH_PRERELEASE: --prerelease
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
      variables:
        GH_PRERELEASE: ""

publish_branch_to_github:
  extends: .base_gh_ssh_agent
  stage: publish
  script:
    - git checkout ${CI_COMMIT_BRANCH} # Checkout the branch not the sha1
    - git remote add downstream git@github.com:cogment/cogment-cli.git
    - git fetch downstream ${CI_COMMIT_BRANCH}
    - git push --tags downstream ${CI_COMMIT_BRANCH}:${CI_COMMIT_BRANCH}
  only:
    - main
